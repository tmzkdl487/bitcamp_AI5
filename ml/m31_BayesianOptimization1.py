param_bounds = {'x1' : (-1, 5),     # 0
                'x2' : (0, 4)}      # 2

def y_function(x1, x2):
    return -x1 **2 - (x2 -2) **2 + 10

from bayes_opt import BayesianOptimization

optimizer = BayesianOptimization(
    f = y_function,
    pbounds=param_bounds,   #  나와바리
    random_state=333,
)

optimizer.maximize(init_points=5,
                   n_iter=20)

# print(optimizer.max)
# |   iter    |  target   |    x1     |    x2     |
# -------------------------------------------------
# | 1         | 4.055     | 2.26      | 2.916     |
# | 2         | 8.732     | -0.8987   | 1.321     |
# | 3         | 5.266     | 1.212     | 0.1932    |
# | 4         | 7.268     | -0.3728   | 0.3898    |
# | 5         | 7.545     | 0.4724    | 3.494     |
# | 6         | 9.447     | -0.6622   | 2.338     |
# | 7         | 5.0       | -1.0      | 4.0       |
# | 8         | 9.991     | 0.07382   | 1.938     |
# | 9         | -19.0     | 5.0       | 0.0       |
# | 10        | 9.384     | 0.7562    | 2.209     |
# | 11        | 9.833     | 0.07889   | 2.4       |
# | 12        | 9.943     | -0.238    | 1.979     |
# | 13        | 9.989     | 0.02889   | 2.101     |
# | 14        | 9.998     | -0.02992  | 1.974     |
# | 15        | 9.984     | 0.1172    | 2.045     |
# | 16        | 9.998     | -0.03047  | 2.036     |
# | 17        | 9.991     | -0.01957  | 1.908     |
# | 18        | 10.0      | -0.01474  | 2.015     |
# | 19        | 10.0      | -0.009926 | 2.009     |
# | 20        | 10.0      | -0.006502 | 2.005     |
# | 21        | 10.0      | -0.004082 | 2.003     |
# | 22        | 10.0      | -0.001933 | 2.001     |
# | 23        | 10.0      | -0.00025  | 1.999     |
# | 24        | 10.0      | 0.001063  | 1.998     |
# | 25        | 10.0      | 0.002085  | 1.997     |
# =================================================
# {'target': np.float64(9.999999219357809), 
# 'params': {'x1': np.float64(-0.000249975830308687), 
# 'x2': np.float64(1.9991525601637667)}}